{"version":3,"sources":["weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","useState","city","setCity","search","setSearch","useEffect","a","url","fetch","resp","json","data","main","getdata","textcolor","color","className","Container","maxWidth","Typography","component","style","height","width","margin","marginTop","type","placeholder","autoFocus","onChange","event","target","value","temp","temp_min","temp_max","tcs","fontWeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA4DeA,EAxDC,WAAO,IAAD,EACMC,mBAAS,MADf,mBACXC,EADW,KACLC,EADK,OAEUF,mBAAS,UAFnB,mBAEXG,EAFW,KAEHC,EAFG,KAKlBC,qBAAU,YACO,uCAAG,gCAAAC,EAAA,6DACNC,EADM,2DACoDJ,EADpD,iEAEOK,MAAMD,GAFb,cAENE,EAFM,gBAGOA,EAAKC,OAHZ,OAGNC,EAHM,OAIZT,EAAQS,EAAKC,MAJD,2CAAH,qDAMbC,KACD,CAACV,IACJ,IAAMW,EAAY,CACdC,MAAO,SAIX,OACI,yBAASC,UAAU,aAAnB,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAKA,UAAU,iBAAf,SACI,cAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,SACI,eAACC,EAAA,EAAD,CAAYC,UAAU,MAAMC,MAAO,CAC/BC,OAAQ,QAASC,MAAO,QAASC,OAAQ,OAAQC,UAAW,SADhE,UAGI,iCACI,cAAC,IAAD,CAAcJ,MAAO,CAAEN,MAAO,WAC9B,uBAAOW,KAAK,OAAOC,YAAY,oBAAoBC,WAAS,EAACC,SAAU,SAACC,GAAD,OAAW1B,EAAU0B,EAAMC,OAAOC,aAE7G,8BACM/B,EAEE,8BACI,yBAASe,UAAU,sBAAnB,SACI,qBAAKA,UAAU,YAAf,SACI,qBAAIA,UAAU,SAAd,UACI,oBAAIK,MAAOP,EAAX,SAAuBX,IACvB,qBAAIkB,MAAOP,EAAX,UAAuBb,EAAKgC,KAA5B,WACA,qBAAIZ,MAAOP,EAAX,mBAA6Bb,EAAKiC,SAAlC,iBAAuDjC,EAAKkC,SAA5D,qBARV,mBAAGd,MAAOP,EAAV,yCCjCpCsB,EAAM,CACVrB,MAAM,QACNsB,WAAW,QAWEC,MATf,WACE,OACE,gCACC,oBAAKjB,MAAOe,EAAKpB,UAAU,KAA3B,mCACD,cAAC,EAAD,QCCWuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fc4887e4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Container, Typography } from '@material-ui/core';\r\nimport LocationCity from '@material-ui/icons/LocationCity'\r\n\r\nconst Weather = () => {\r\n    const [city, setCity] = useState(null);\r\n    const [search, setSearch] = useState('Mumbai');\r\n\r\n\r\n    useEffect(() => {\r\n        const getdata = async () => {\r\n            const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=d24222af2cc7eac6acbdafa3bfc1ed5b`\r\n            const resp = await fetch(url);\r\n            const data = await resp.json();\r\n            setCity(data.main);\r\n        }\r\n        getdata();\r\n    }, [search])\r\n    const textcolor = {\r\n        color: \"white\"\r\n    }\r\n\r\n\r\n    return (\r\n        <section className=\"top-banner\">\r\n            <div className=\"container\">\r\n                <div className='main-container' >\r\n                    <Container maxWidth=\"sm\">\r\n                        <Typography component=\"div\" style={{\r\n                            height: '400px', width: \"300px\", margin: \"auto\", marginTop: \"100px\"\r\n                        }}>\r\n                            <form>\r\n                                <LocationCity style={{ color: \"white\" }} />\r\n                                <input type=\"text\" placeholder=\"Search for a city\" autoFocus onChange={(event) => setSearch(event.target.value)} />\r\n                            </form>\r\n                            <div>\r\n                                {!city ? (<p style={textcolor}>No Data Found</p>) : (\r\n\r\n                                    <div>\r\n                                        <section className=\"ajax-section cities\">\r\n                                            <div className=\"container\">\r\n                                                <ul className=\"cities\">\r\n                                                    <h1 style={textcolor}>{search}</h1>\r\n                                                    <h3 style={textcolor}>{city.temp}°C</h3>\r\n                                                    <h4 style={textcolor}>Min : {city.temp_min} °C | Max: {city.temp_max} °C</h4>\r\n                                                </ul>\r\n                                            </div>\r\n                                        </section>\r\n                                    </div>\r\n                                )\r\n                                }\r\n                            </div>\r\n                        </Typography>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react'\nimport Weather from './weather'\n\nconst tcs = {\n  color:\"white\",\n  fontWeight:\"bold\"\n}\nfunction App() {\n  return (\n    <div>\n     <h1  style={tcs} className='tc'>Real-Time Weather App</h1>\n    <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}